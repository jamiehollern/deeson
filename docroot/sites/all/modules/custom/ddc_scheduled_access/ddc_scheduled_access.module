<?php
/**
 * @file
 * Provides hooks and helper functions.
 */
use \Drupal\ddc_scheduled_access\EntityWrapper\Node\NodeWrapper;
use \Drupal\ddc_scheduled_access\EntityWrapper\User\UserWrapper;

/**
 * Implements hook_node_grants().
 */
function ddc_scheduled_access_node_grants($account, $op) {
  $user_wrapper = new UserWrapper($account);
  return $user_wrapper->nodeGrants($op);
}

/**
 * Implements hook_node_access_records().
 */
function ddc_scheduled_access_node_access_records($node) {
  $node_wrapper = new NodeWrapper($node->nid);
  return $node_wrapper->setAccessRecords();
}

/**
 * Implements hook_node_update().
 *
 * If an article is updated then node access may need to be rebuilt.
 */
function ddc_scheduled_access_node_update($node) {
  $node_wrapper = new NodeWrapper($node);
  return $node_wrapper->needsRebuild();
}

/**
 * Implements hook_cron().
 */
function ddc_scheduled_access_cron() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition('field_access_date', 'value', time(), '<=')
    ->fieldCondition('field_limit_access', 'value', '1', '=')
  ;
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid) {
      $node_wrapper = new NodeWrapper($nid);
      $node_wrapper->removeScheduleFields();
    }
  }
}