<?php
/**
 * @file
 * Provides hooks and helper functions.
 */
use \Drupal\ddc_scheduled_access\EntityWrapper\Node\NodeWrapper;
use \Drupal\ddc_scheduled_access\EntityWrapper\User\UserWrapper;

/**
 * Implements hook_node_grants().
 */
function ddc_scheduled_access_node_grants($account, $op) {
  $user_wrapper = new UserWrapper($account);
  return $user_wrapper->nodeGrants($op);
}

/**
 * Implements hook_node_access_records().
 */
function ddc_scheduled_access_node_access_records($node) {
  $node_wrapper = new NodeWrapper($node);
  return $node_wrapper->setAccessRecords();
}

/**
 * Implements hook_node_load().
 */
function ddc_scheduled_access_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $node_wrapper = new NodeWrapper($node);
    return $node_wrapper->verifyGrants();
  }
}

/**
 * Implements hook_cron().
 */
function ddc_scheduled_access_cron() {
  $nodes = _ddc_get_scheduled_nodes();
  foreach ($nodes as $node) {
    $node_wrapper = new NodeWrapper($node->nid);
    $node_wrapper->verifyGrants();
  }
}

/**
 * Helper function to get nodes
 *
 * @return array
 *   An array of skeleton nodes.
 */
function _ddc_get_scheduled_nodes() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', NodeWrapper::DDC_SCHEDULED_ACCESS_BUNDLE)
    ->fieldCondition('field_access_date', 'value', time(), '<=')
    ->fieldCondition('field_limit_access', 'value', '1', '=');
  $result = $query->execute();
  if (isset($result['node'])) {
    return $result['node'];
  }
  return [];
}
